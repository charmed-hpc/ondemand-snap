# Copyright 2024 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ondemand
title: Open OnDemand
version: "3.1.4"
summary: Open, interactive High-Performance Computing via the web.
description: >
  Open OnDemand empowers students, researchers, and industry professionals
  with remote web access to supercomputers, high-performance computing
  clusters, and computational grids.
license: MIT
website: "https://openondemand.org"

base: core22
grade: devel
confinement: classic
compression: lzo
environment:
  # yamllint disable rule:line-length
  PATH: $SNAP/ondemand/gems/bin:$SNAP/passenger/bin:$SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/sbin:$SNAP/bin:$SNAP/usr/local/bin:$SNAP/usr/local/sbin:$PATH
  GEM_PATH: $SNAP/ondemand/gems
  RUBYLIB: $SNAP/usr/lib/ruby/3.0.0:$SNAP/usr/lib/ruby/gems/3.0.0:$SNAP/usr/lib/x86_64-linux-gnu/ruby/3.0.0:$SNAP/usr/lib/ruby/vendor_ruby/3.0.0:$SNAP/usr/lib/x86_64-linux-gnu/ruby/vendor_ruby/3.0.0
  LUA_PATH: $SNAP/usr/share/lua/5.3/?.lua;$SNAP/usr/share/lua/5.3/?/init.lua;;
  LUA_CPATH: $SNAP/usr/lib/x86_64-linux-gnu/lua/5.3/?.so;$SNAP/usr/lib/lua/5.3/?.so;;
  # yamllint enable rule:line-length
system-usernames:
  snap_daemon: shared

apps:
  ondemand:
    command: sbin/httpd.wrapper -k start -DFOREGROUND
    stop-command: sbin/httpd.wrapper -k graceful-stop
    restart-condition: on-abort
    install-mode: disable
    daemon: simple

  update-ood-portal:
    command: sbin/update-ood-portal.wrapper

parts:
  patch:
    source: patches/
    plugin: dump
    organize:
      '*': patches/
    prime:
      - -*

  overlay:
    source: overlays/
    plugin: dump
    organize:
      "overlays/conf/*": conf/
      "overlays/sbin/*": sbin/
      "overlays/templates/*": templates/
    prime:
      - -conf

  hooks:
    source: hooks/
    plugin: dump
    build-attributes: [enable-patchelf]
    build-packages:
      - luarocks
      - lua5.3
      - liblua5.3-dev
      - libyaml-dev
    stage-packages:
      - lua5.3
      - liblua5.3-0
      - libyaml-0-2
    override-build: |
      craftctl default

      set -e
      HOOK_DIR=${CRAFT_PRIME}/meta/hooks
      mkdir -p ${HOOK_DIR}
      
      # Set install location hooks and deps.
      cat << EOF > /etc/luarocks/config-5.3.lua
      rocks_trees = {
        [[${CRAFT_PART_INSTALL}/usr]]
      }
      EOF

      # Setup hooks.
      luarocks install snaphelpers
      luarocks install lualogging 1.8.2  
      install -m 0755 install.lua ${HOOK_DIR}/install
      install -m 0755 configure.lua ${HOOK_DIR}/configure
      mv ondemand/ ${CRAFT_PART_INSTALL}/usr/share/lua/5.3
    prime:
      - -install.lua
      - -configure.lua
      - -ondemand

  apache:
    plugin: nil
    after: [overlay]
    build-attributes: [enable-patchelf]
    build-packages:
      - autoconf
      - automake
      - autopoint
      - gcc
      - libtool
      - libapr1-dev
      - libaprutil1-dev
      - libssl-dev
      - libpcre2-dev
      - libcjose-dev
      - libjansson-dev
      - libcurl4-openssl-dev
      - libnghttp2-dev
      - liblua5.3-dev
    stage-packages:
      - libapr1-dev  # Provides apr-1-config binary required by `apxs`.
      - libaprutil1-dev  # Provides apu-1-config binary required by `apxs`.
      - libssl3
      - libpcre2-32-0
      - libcjose0
      - libjansson4
      - libcurl4
      - libnghttp2-14
    stage:
      - -httpd/man
      - -httpd/manual
      - -httpd/htdocs
      - -httpd/include
      - -httpd/build
      - -httpd/conf/magic
      - -httpd/conf/original
      - -httpd/conf/extra
      - -httpd/bin/apachectl
      - -httpd/bin/envvars*
    # yamllint disable rule:line-length
    override-build: |
      craftctl default
      
      set -e
      ## Build `httpd` and openidc module.
      HTTPD_INSTALL_DIR=${CRAFT_PART_INSTALL}/httpd

      # Fetch sources for `httpd` and openidc module from Ubuntu Archive.
      curl -fsSL -o - \
        http://archive.ubuntu.com/ubuntu/pool/main/a/apache2/apache2_2.4.58.orig.tar.gz | \
        tar -xzf -
      curl -fsSL -o - \
        http://archive.ubuntu.com/ubuntu/pool/universe/liba/libapache2-mod-auth-openidc/libapache2-mod-auth-openidc_2.4.15.1.orig.tar.gz | \
        tar -xzf -
      
      # Build and install `httpd`.
      cd httpd-2.4.58 && ./configure \
        --prefix=${HTTPD_INSTALL_DIR} \
        --enable-pie \
        --enable-mpm=event \
        --enable-modules=none \
        --enable-mods-static="http log_config logio unixd version watchdog" \
        --enable-mods-shared="access_compat alias auth_basic authn_core authn_file authz_core authz_host authz_user autoindex deflate dir env filter headers lua mime negotiation proxy proxy_http proxy_wstunnel reqtimeout rewrite setenvif ssl status"
      make -j${CRAFT_PARALLEL_BUILD_COUNT} && make install && cd ..
      
      # Build and install openidc module.
      cd mod_auth_openidc-2.4.15.1 && ./autogen.sh && ./configure \
        --prefix=${HTTPD_INSTALL_DIR} \
        --with-apxs=${HTTPD_INSTALL_DIR}/bin/apxs \
        CPPFLAGS="-I/${HTTPD_INSTALL_DIR}/include"
      make -j${CRAFT_PARALLEL_BUILD_COUNT} && make install && cd ..

      # Copy in `httpd.conf` overlay.
      cp ${CRAFT_STAGE}/conf/httpd.conf ${HTTPD_INSTALL_DIR}/conf/httpd.conf
    # yamllint enable rule:line-length

  nginx-passenger:
    plugin: nil
    after: [patch]
    build-attributes: [enable-patchelf]
    build-packages:
      - libcurl4-openssl-dev
      - libssl-dev
      - zlib1g-dev
      - libpcre2-dev
      - libxslt1-dev
      - libgd-dev
      - libev-dev
      - libuv1-dev
      - wget
      - ruby
      - ruby-dev
      - ruby-rack
      - ruby-bundler
      - rake
    stage-packages:
      - openssl
      - zlib1g
      - libpcre2-8-0
      - libxslt1.1
      - libgd3
      - libev4
      - libuv1
      - ruby
      - ruby-rack
      - ruby-bundler
      - rake
    # yamllint disable rule:line-length
    override-build: |
      craftctl default

      set -e
      ## Build  `nginx` + `passenger`.
      SNAP_COMMON=/var/snap/${SNAPCRAFT_PROJECT_NAME}/common
      RUBYDIR=${CRAFT_PART_INSTALL}/usr/lib/ruby
      PASSENGER_BUILD_DIR=${CRAFT_PART_INSTALL}/passenger
      NGINX_BUILD_DIR=${CRAFT_PART_BUILD}/nginx
      export LD_LIBRARY_PATH=${CRAFT_PART_INSTALL}/lib:${CRAFT_PART_INSTALL}/usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_ON}
      export GEM_HOME=${RUBYDIR}/gems/3.0.0

      # Fetch sources for `nginx` + `passenger` from Ubuntu Archive.
      mkdir -p ${PASSENGER_BUILD_DIR}
      curl -fsSL -o - \
        http://archive.ubuntu.com/ubuntu/pool/universe/p/passenger/passenger_6.0.10.orig.tar.gz | \
        tar -xzf - -C ${PASSENGER_BUILD_DIR} --strip 1
      mkdir -p ${NGINX_BUILD_DIR}
      curl -fsSL -o - \
        http://archive.ubuntu.com/ubuntu/pool/main/n/nginx/nginx_1.24.0.orig.tar.gz | \
        tar -xzf - -C ${NGINX_BUILD_DIR} --strip 1

      # Apply patches to `passenger`.
      cd ${PASSENGER_BUILD_DIR}
      for patch in ${CRAFT_STAGE}/patches/passenger/*.patch; do
        echo "Applying $(basename "$patch") ..."
        patch \
          --batch \
          --forward \
          --strip 1 \
          --input "$patch"
        echo
      done
      cd ..

      # Build `nginx` + `passenger` using the passenger installation script.
      ${PASSENGER_BUILD_DIR}/bin/passenger-install-nginx-module \
        --auto \
        --languages=ruby,python,nodejs \
        --nginx-source-dir=${NGINX_BUILD_DIR} \
        --prefix=${CRAFT_PART_INSTALL}/nginx \
        --extra-configure-flags="\
          --http-log-path=${SNAP_COMMON}/var/log/nginx/access.log \
          --error-log-path=${SNAP_COMMON}/var/log/nginx/error.log \
          --lock-path=${SNAP_COMMON}/run/locks/nginx.lock \
          --pid-path=${SNAP_COMMON}/run/nginx.pid \
          --http-client-body-temp-path=${SNAP_COMMON}/var/lib/nginx_client_body \
          --http-proxy-temp-path=${SNAP_COMMON}/var/lib/nginx_proxy \
          --http-fastcgi-temp-path=${SNAP_COMMON}/var/lib/nginx_fastcgi \
          --http-uwsgi-temp-path=${SNAP_COMMON}/var/lib/nginx_uwsgi \
          --http-scgi-temp-path=${SNAP_COMMON}/var/lib/nginx_scgi \
          --user=snap_daemon \
          --group=snap_daemon \
          --with-file-aio \
          --with-http_ssl_module \
          --with-http_v2_module \
          --with-http_realip_module \
          --with-http_addition_module \
          --with-http_xslt_module \
          --with-http_image_filter_module \
          --with-http_sub_module \
          --with-http_dav_module \
          --with-http_flv_module \
          --with-http_mp4_module \
          --with-http_gunzip_module \
          --with-http_gzip_static_module \
          --with-http_random_index_module \
          --with-http_secure_link_module \
          --with-http_degradation_module \
          --with-http_stub_status_module \
          --with-mail \
          --with-mail_ssl_module \
          --with-pcre \
          --with-pcre-jit"
    # yamllint enable rule:line-length

  # Replace `update_ood_portal` with `generate-ood-portal` binary.
  #
  # `generate-ood-portal` renders an apache2 configuration file
  # for the Open OnDemand portal using `ood_portal.yml`.
  # `generate-ood-portal` is "simpler" than `update_ood_portal`
  # as it just renders an apache2 configuration file. It should
  # be considered a lower-level utility compared to `update_ood_portal`
  ood-portal-generator:
    source: "https://github.com/charmed-hpc/ood-portal-generator.git"
    plugin: go
    build-snaps:
      - go/1.22/stable

  ondemand:
    source: "https://github.com/osc/ondemand.git"
    source-tag: v${SNAPCRAFT_PROJECT_VERSION}
    plugin: nil
    build-attributes: [enable-patchelf]
    build-packages:
      - build-essential
      - curl
      - tzdata
      - libxml2-dev
      - libxslt1-dev
      - pkg-config
      - zlib1g-dev
      - liblzma-dev
      - sqlite3
      - libsqlite3-dev
      - python3
      - ruby
      - ruby-dev
      - rake
    build-snaps:
      - node/20/stable
    stage-packages:
      - file
      - lsof
      - ruby
    stage-snaps:
      - node/20/stable
    stage:
      - -ondemand/nginx_stage/share/nginx_stage_example.yml
      - -ondemand/ood-portal-generator  # Replaced by `generate-ood-portal`.
    # yamllint disable rule:line-length
    override-build: |
      craftctl default

      set -e
      ONDEMAND_INSTALL_DIR=${CRAFT_PART_INSTALL}/ondemand
      # Set installation location for Ruby gems required by `ondemand`.
      export GEM_HOME=${ONDEMAND_INSTALL_DIR}/gems

      # Build `ondemand` using `rake` and `bundle`
      BUNDLE_WITHOUT='test package' bundle install
      rake --trace -mj${CRAFT_PARALLEL_BUILD_COUNT} build
      rm -rf ${GEM_HOME}/cache
      rm -rf apps/*/node_modules/.cache

      # Install `ondemand`.
      PREFIX=${ONDEMAND_INSTALL_DIR} rake --trace install
      
      # Create `VERSION` file from the project version. The `VERSION` file is required
      # by a couple of `ondemand` utilities such as `nginx_stage`.
      echo ${SNAPCRAFT_PROJECT_VERSION} > ${ONDEMAND_INSTALL_DIR}/VERSION

      # Add required environment variables to `nginx_stage` profile.
      # $SNAP_* env vars will not be propagated to `nginx_stage` due
      # to how the utility is invoked by `httpd`, so we must hardcode
      # the required env vars in.
      cat << 'EOF' > ${ONDEMAND_INSTALL_DIR}/nginx_stage/etc/profile
      export SNAP=/snap/ondemand/current
      export SNAP_COMMON=/var/snap/ondemand/common
      
      export PATH=${SNAP}/ondemand/gems/bin:${SNAP}/passenger/bin:${SNAP}/usr/bin:${SNAP}/sbin:${SNAP}/bin:${PATH}
      export GEM_PATH=${SNAP}/ondemand/gems
      export RUBYLIB=$SNAP/usr/lib/ruby/3.0.0:$SNAP/usr/lib/ruby/gems/3.0.0:$SNAP/usr/lib/$(uname -p)-linux-gnu/ruby/3.0.0:$SNAP/usr/lib/ruby/vendor_ruby/3.0.0:$SNAP/usr/lib/$(uname -p)-linux-gnu/ruby/vendor_ruby/3.0.0
      export NGINX_STAGE_CONFIG_FILE=${SNAP_COMMON}/etc/ondemand/nginx-stage.yaml
      EOF
    # yamllint enable rule:line-length

  cleanup:
    plugin: nil
    after: [nginx-passenger, ondemand]
    override-prime: |
      craftctl default

      set -e
      # Purge `bundler` brought in by the `libruby` package. 
      #
      # If left within the snap, Passenger will attempt to use this bundler 
      # rather than the bundler version set in `Gemfile.lock` for each of the 
      # interactive apps. This is will cause Passenger to bork as the bundler 
      # version the apps will activate is not what Passenger expects.
      rm -rf usr/lib/ruby/gems/3.0.0/specifications/default/bundler-2.2.22.gemspec
      rm -rf usr/lib/ruby/gems/3.0.0/gems/bundler-2.2.22
      rm -rf usr/lib/ruby/3.0.0/bundler
